macro(DECCHAR2HEX VAR VAL)
    if (${VAL} LESS 10)
        set(${VAR} ${VAL})
    elseif (${VAL} EQUAL 10)
        set(${VAR} "A")
    elseif (${VAL} EQUAL 11)
        set(${VAR} "B")
    elseif (${VAL} EQUAL 12)
        set(${VAR} "C")
    elseif (${VAL} EQUAL 13)
        set(${VAR} "D")
    elseif (${VAL} EQUAL 14)
        set(${VAR} "E")
    elseif (${VAL} EQUAL 15)
        set(${VAR} "F")
    else ()
        message(FATAL_ERROR "Invalid format for hexidecimal character")
    endif ()
endmacro(DECCHAR2HEX)

macro(DEC2HEX VAR VAL)
    if (${VAL} EQUAL 0)
        set(${VAR} 0)
    ELSE ()
        set(VAL2 ${VAL})
        set(${VAR} "")

        WHILE (${VAL2} GREATER 0)
            math(EXPR VALCHAR "(${VAL2}&15)")
            DECCHAR2HEX(VALCHAR ${VALCHAR})
            set(${VAR} "${VALCHAR}${${VAR}}")
            math(EXPR VAL2 "${VAL2} >> 4")
        ENDWHILE ()
    ENDIF ()
endmacro(DEC2HEX)

macro(Get_Compression_Magic_Numbers comp)
    if ("${comp}" STREQUAL "gz")

    elseif ("${comp}" STREQUAL "xz")

    elseif ("${comp}" STREQUAL "zip")
        DEC2HEX("${comp}_magic_number" "BZh")
    elseif ("${comp}" STREQUAL "zz")

    elseif ("${comp}" STREQUAL "Z")

    elseif ("${comp}" STREQUAL "7z")
        DEC2HEX("${comp}_magic_number" 7z)
        set("${comp}_magic_number" "${${comp}_magic_number}")
    else ()
        set("${comp}_magic_number" No)
    endif ()
endmacro()

function(Get_Dependency in_name in_link)
    # Pre-Init #################################################################
    ## Log variables
    message(DEBUG "[Get-Dependency]<Pre-Init> Setting logging variables")

    set(LOG_NAME "[Get-Dependency]")
    set(LOG_PreInit "${LOG_NAME}<Pre-Init>")
    set(LOG_Init "${LOG_NAME}<Init>")
    set(LOG_PostInit "${LOG_NAME}<Post-Init>")
    set(LOG_Runtime "${LOG_NAME}<Runtime>")
    set(LOG_ClearUp "${LOG_NAME}<Clearup>")
    set(LOG_Error "${LOG_NAME}<Error!>")

    message(DEBUG "${LOG_Pre} Setting logging variables - Done")

    ## Log macros
    message(DEBUG "${LOG_Pre} Creating utility logging macro")

    macro(LOG In_Method In_Phase In_Msg)
        if (${ARGC} EQ 2)
            if ("${ARG1}" STREQUAL "ERROR")
                message(ERROR "${LOG_Error} ${ARG2}")
            else ()
                message(${ARG1} "${LOG_Runtime} ${ARG2}")
            endif ()
        else ()
            message(${In_Method} "${LOG_${In_Phase}} ${In_Msg}")
        endif ()
    endmacro()

    LOG(DEBUG PreInit "Creating utility logging macro - Done")

    # Init #####################################################################
    ## Parameters are non-null
    LOG(DEBUG Init "Checking call arguments")
    if (NOT "${in_name}" OR NOT "${in_link}")
        LOG(DEBUG Init "Checking call arguments - Failure")
        LOG(ERROR "Calling requires 2 parameters: Get_Dependency(<name> <link>)")
    endif ()
    LOG(DEBUG Init "Checking call arguments - Success")

    ## Git exists
    LOG(STATUS Init "Searching for Git")
    find_package(Git)
    if (NOT GIT_FOUND)
        LOG(STATUS Init "Searching for Git - Failure")
        LOG(ERROR "Usage (currently) requires a git installation findable by CMake")
    endif ()
    LOG(STATUS Init "Searching for Git - Success")

    ## Setting Windows specific execution string
    LOG(STATUS Init "Setting Windows specific execution prefix")
    if (WIN32)
        set(EXECUTION_PREFIX cmd /c)
    else ()
        set(EXECUTION_PREFIX "")
    endif ()
    LOG(DEBUG Init "Set execution prefix to: \"${EXECUTION_PREFIX}\"")
    LOG(STATUS Init "Setting Windows specific execution prefix - Done")

    # Post-Init ################################################################
    ## Setting variables for the dependency
    LOG(DEBUG PostInit "Setting dependency variables")
    set(DEPENDENCY_NAME "${in_name}")
    string(TOLOWER "${DEPENDENCY_NAME}" DEPENDENCY_PATH)
    set(DEPENDENCY_APATH "${PROJECT_SOURCE_DIR}/libs/${DEPENDENCY_PATH}")
    LOG(DEBUG PostInit "Setting dependency variables - Done")

    ## Checking for git repo
    LOG(STATUS PostInit "Checking for git repository")
    execute_process(
            COMMAND ${EXECUTION_PREFIX} "${GIT_EXECUTABLE}" ls-remote "${in_link}"
            OUTPUT_SILENT ERROR_SILENT
            RESULT_VARIABLE Remote_Legal
    )
    if ("${Remote_Legal}" EQ 0)
        set(DEPENDENCY_GIT_REPO Yes)
        LOG(STATUS PostInit "Checking for git repository - Success")
    else ()
        set(DEPENDENCY_GIT_REPO No)
        LOG(STATUS PostInit "Checking for git repository - Failure")
    endif ()

    # Runtime ##################################################################
    ## Downloading Sources
    LOG(STATUS "Downloading dependency '${DEPENDENCY_NAME}'")
    if (${DEPENDENCY_GIT_REPO})
        LOG(STATUS "Cloning git repository")
        if (NOT EXISTS "${DEPENDENCY_APATH}")
            execute_process(
                    COMMAND ${EXECUTION_PREFIX} "${GIT_EXECUTABLE}" clone "${in_link}" "${DEPENDENCY_PATH}"
                    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/libs"
            )
            LOG(STATUS "Cloning git repository - Done")
        else ()
            LOG(STATUS "Cloning git repository - Cached")
        endif ()
    else ()
        LOG(STATUS "Downloading file")

        LOG(STATUS "Checking directory exists")
        if (EXISTS "${DEPENDENCY_APATH}")
            LOG(STATUS "Checking directory exists - Failure")
            LOG(STATUS "Creating directory")
            file(MAKE_DIRECTORY "${DEPENDENCY_APATH}")
            LOG(STATUS "Creating directory - Done")
        else ()
            LOG(STATUS "Checking directory exists - Succes")
        endif ()

        string(REGEX REPLACE ".+/([^/]+)/?" "\\1" DEP_FILE "${in_link}")
        if (NOT EXISTS "${DEPENDENCY_APATH}/${DEP_FILE}")
            file(DOWNLOAD "${in_link}" "${DEPENDENCY_APATH}/${DEP_FILE}")
            LOG(STATUS "Downloading file - Done")
        else ()
            LOG(STATUS "Downloading file - Cached")
        endif ()

        LOG(STATUS "Extracting archive")
        LOG(STATUS "Figuring out compression type")
        string(REGEX MATCH "\\." DEP_HAS_DOT ${DEP_FILE})
        if (${DEP_HAS_DOT})
            string(REGEX REPLACE ".+\\.(\\S*)" "\\1" DEP_EXT)
            if ("${DEP_EXT}" STREQUAL "")
                LOG(DEBUG "Couldn't determine compression type from extension")
            else ()
                set(DEP_HAS_EXT)
                LOG(DEBUG "Determined compression type from extension")
            endif ()
        elseif (NOT DEP_HAS_EXT)
            LOG(STATUS "Funky mode - Trying to figure compresssion out from binary")
            set(COMP_TYP No)
            foreach (comp IN ITEMS gz;xz;zip;7z;bz2;zz;Z)
                Get_Compression_Magic_Numbers(${comp})
                if ("${comp}_magic_number")
                    list(LENGTH ${comp}_magic_number MAGIC_LENGTH)
                    file(READ todo)
                else ()
                    LOG(ERROR "Couldn't figure out compression")
                endif ()
            endforeach ()
        endif ()

        if (DEP_HAS_EXT)
            if (${DEP_EXT} STREQUAL "gz")
                set(DEP_COMP_TYPE "gzip")
            elseif (${DEP_EXT} STREQUAL "xz")
                set(DEP_COMP_TYPE "xz")
            elseif (${DEP_EXT} STREQUAL "zip")
                set(DEP_COMP_TYPE "zip")
            elseif (${DEP_EXT} STREQUAL "7z")
                set(DEP_COMP_TYPE "7zip")
            elseif (${DEP_EXT} STREQUAL "bz2")
                set(DEP_COMP_TYPE "bzip2")
            elseif (${DEP_EXT} STREQUAL "zz")
                set(DEP_COMP_TYPE "ZLib")
            elseif (${DEP_EXT} STREQUAL "Z")
                set(DEP_COMP_TYPE "UNIX compress")
            endif ()
        endif ()

        LOG(STATUS "Figuring out compression type - Done")
        LOG(DEBUG "Compression type: ${DEP_COMP_TYPE}")
        LOG(STATUS "Extracting archive - Done")
    endif ()
    LOG(STATUS "Downloading dependency '${DEPENDENCY_NAME}' - Done")

    message(STATUS "Registering External Library '${DEPENDENCY_NAME}'")
    add_subdirectory("${DEPENDENCY_APATH}")
endfunction()
